<form id="pageRuleForm" class="grid md:grid-cols-3 gap-4 mb-8 text-left">
    <div class="flex flex-col gap-1">
        <label for="url" class="text-sm text-zinc-400">Link to redirect</label>
        <input
            type="url"
            id="url"
            name="url"
            placeholder="https://example.com"
            class="bg-zinc-800 border border-zinc-700 rounded-lg px-4 py-2 text-white placeholder-zinc-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
    </div>
    <div class="flex flex-col gap-1">
        <label for="hash" class="text-sm text-zinc-400">Hash</label>
        <input
            type="text"
            id="hash"
            name="hash"
            placeholder="abc123"
            class="bg-zinc-800 border border-zinc-700 rounded-lg px-4 py-2 text-white placeholder-zinc-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
    </div>
    <div class="flex flex-col gap-1">
        <label for="authCode" class="text-sm text-zinc-400">Auth Code</label>
        <input
            type="password"
            id="authCode"
            name="authCode"
            placeholder="••••••••"
            class="bg-zinc-800 border border-zinc-700 rounded-lg px-4 py-2 text-white placeholder-zinc-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
    </div>

    <div class="md:col-span-3 flex justify-end mt-4">
        <button
            type="submit"
            class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold px-6 py-2 rounded-lg transition-colors duration-200"
        >
            Save Redirect
        </button>
    </div>
</form>

<script type="module">
    const form = document.getElementById("pageRuleForm");

    form?.addEventListener("submit", async (e) => {
        e.preventDefault();

        const url = form.url.value.trim();
        const hash = form.hash.value.trim();
        const authCode = form.authCode.value.trim();

        if (!url || !hash || !authCode) {
            alert("Todos los campos son requeridos.");
            return;
        }

        const redirectFrom = `https://incognity.link/${hash}`;

        const pageRule = {
            actions: [
                {
                    id: "forwarding_url",
                    value: {
                        status_code: 301,
                        url,
                    },
                },
            ],
            targets: [
                {
                    constraint: {
                        operator: "matches",
                        value: redirectFrom,
                    },
                    target: "url",
                },
            ],
            priority: 1,
            status: "active",
        };

        try {
            const res = await fetch("/api/cloudflare", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(pageRule),
            });

            if (!res.ok) {
                const err = await res.json();
                console.error("Error:", err);
                alert("Error al crear el redireccionamiento.");
            } else {
                alert("Redireccionamiento creado con éxito.");
                form.reset();
                location.reload(); // o recargar lista dinámicamente
            }
        } catch (err) {
            console.error("Error de red:", err);
            alert("Error de red al intentar guardar el redireccionamiento.");
        }
    });
</script>
